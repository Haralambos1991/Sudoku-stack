{"ast":null,"code":"//     Underscore.js 1.1.6\n//     (c) 2011 Jeremy Ashkenas, DocumentCloud Inc.\n//     Underscore is freely distributable under the MIT license.\n//     Portions of Underscore are inspired or borrowed from Prototype,\n//     Oliver Steele's Functional, and John Resig's Micro-Templating.\n//     For all details and documentation:\n//     http://documentcloud.github.com/underscore\n(function () {\n  // Baseline setup\n  // --------------\n  // Establish the root object, `window` in the browser, or `global` on the server.\n  var root = this; // Save the previous value of the `_` variable.\n\n  var previousUnderscore = root._; // Establish the object that gets returned to break out of a loop iteration.\n\n  var breaker = {}; // Save bytes in the minified (but not gzipped) version:\n\n  var ArrayProto = Array.prototype,\n      ObjProto = Object.prototype,\n      FuncProto = Function.prototype; // Create quick reference variables for speed access to core prototypes.\n\n  var slice = ArrayProto.slice,\n      unshift = ArrayProto.unshift,\n      toString = ObjProto.toString,\n      hasOwnProperty = ObjProto.hasOwnProperty; // All **ECMAScript 5** native function implementations that we hope to use\n  // are declared here.\n\n  var nativeForEach = ArrayProto.forEach,\n      nativeMap = ArrayProto.map,\n      nativeReduce = ArrayProto.reduce,\n      nativeReduceRight = ArrayProto.reduceRight,\n      nativeFilter = ArrayProto.filter,\n      nativeEvery = ArrayProto.every,\n      nativeSome = ArrayProto.some,\n      nativeIndexOf = ArrayProto.indexOf,\n      nativeLastIndexOf = ArrayProto.lastIndexOf,\n      nativeIsArray = Array.isArray,\n      nativeKeys = Object.keys,\n      nativeBind = FuncProto.bind; // Create a safe reference to the Underscore object for use below.\n\n  var _ = function _(obj) {\n    return new wrapper(obj);\n  }; // Export the Underscore object for **CommonJS**, with backwards-compatibility\n  // for the old `require()` API. If we're not in CommonJS, add `_` to the\n  // global object.\n\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = _;\n    _._ = _;\n  } else {\n    root._ = _;\n  } // Current version.\n\n\n  _.VERSION = '1.1.6'; // Collection Functions\n  // --------------------\n  // The cornerstone, an `each` implementation, aka `forEach`.\n  // Handles objects implementing `forEach`, arrays, and raw objects.\n  // Delegates to **ECMAScript 5**'s native `forEach` if available.\n\n  var each = _.each = _.forEach = function (obj, iterator, context) {\n    if (obj == null) return;\n\n    if (nativeForEach && obj.forEach === nativeForEach) {\n      obj.forEach(iterator, context);\n    } else if (_.isNumber(obj.length)) {\n      for (var i = 0, l = obj.length; i < l; i++) {\n        if (iterator.call(context, obj[i], i, obj) === breaker) return;\n      }\n    } else {\n      for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) {\n          if (iterator.call(context, obj[key], key, obj) === breaker) return;\n        }\n      }\n    }\n  }; // Return the results of applying the iterator to each element.\n  // Delegates to **ECMAScript 5**'s native `map` if available.\n\n\n  _.map = function (obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);\n    each(obj, function (value, index, list) {\n      results[results.length] = iterator.call(context, value, index, list);\n    });\n    return results;\n  }; // **Reduce** builds up a single result from a list of values, aka `inject`,\n  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.\n\n\n  _.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {\n    var initial = memo !== void 0;\n    if (obj == null) obj = [];\n\n    if (nativeReduce && obj.reduce === nativeReduce) {\n      if (context) iterator = _.bind(iterator, context);\n      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);\n    }\n\n    each(obj, function (value, index, list) {\n      if (!initial && index === 0) {\n        memo = value;\n        initial = true;\n      } else {\n        memo = iterator.call(context, memo, value, index, list);\n      }\n    });\n    if (!initial) throw new TypeError(\"Reduce of empty array with no initial value\");\n    return memo;\n  }; // The right-associative version of reduce, also known as `foldr`.\n  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.\n\n\n  _.reduceRight = _.foldr = function (obj, iterator, memo, context) {\n    if (obj == null) obj = [];\n\n    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {\n      if (context) iterator = _.bind(iterator, context);\n      return memo !== void 0 ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);\n    }\n\n    var reversed = (_.isArray(obj) ? obj.slice() : _.toArray(obj)).reverse();\n    return _.reduce(reversed, iterator, memo, context);\n  }; // Return the first value which passes a truth test. Aliased as `detect`.\n\n\n  _.find = _.detect = function (obj, iterator, context) {\n    var result;\n    any(obj, function (value, index, list) {\n      if (iterator.call(context, value, index, list)) {\n        result = value;\n        return true;\n      }\n    });\n    return result;\n  }; // Return all the elements that pass a truth test.\n  // Delegates to **ECMAScript 5**'s native `filter` if available.\n  // Aliased as `select`.\n\n\n  _.filter = _.select = function (obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);\n    each(obj, function (value, index, list) {\n      if (iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  }; // Return all the elements for which a truth test fails.\n\n\n  _.reject = function (obj, iterator, context) {\n    var results = [];\n    if (obj == null) return results;\n    each(obj, function (value, index, list) {\n      if (!iterator.call(context, value, index, list)) results[results.length] = value;\n    });\n    return results;\n  }; // Determine whether all of the elements match a truth test.\n  // Delegates to **ECMAScript 5**'s native `every` if available.\n  // Aliased as `all`.\n\n\n  _.every = _.all = function (obj, iterator, context) {\n    var result = true;\n    if (obj == null) return result;\n    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);\n    each(obj, function (value, index, list) {\n      if (!(result = result && iterator.call(context, value, index, list))) return breaker;\n    });\n    return result;\n  }; // Determine if at least one element in the object matches a truth test.\n  // Delegates to **ECMAScript 5**'s native `some` if available.\n  // Aliased as `any`.\n\n\n  var any = _.some = _.any = function (obj, iterator, context) {\n    iterator || (iterator = _.identity);\n    var result = false;\n    if (obj == null) return result;\n    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);\n    each(obj, function (value, index, list) {\n      if (result = iterator.call(context, value, index, list)) return breaker;\n    });\n    return result;\n  }; // Determine if a given value is included in the array or object using `===`.\n  // Aliased as `contains`.\n\n\n  _.include = _.contains = function (obj, target) {\n    var found = false;\n    if (obj == null) return found;\n    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;\n    any(obj, function (value) {\n      if (found = value === target) return true;\n    });\n    return found;\n  }; // Invoke a method (with arguments) on every item in a collection.\n\n\n  _.invoke = function (obj, method) {\n    var args = slice.call(arguments, 2);\n    return _.map(obj, function (value) {\n      return (method.call ? method || value : value[method]).apply(value, args);\n    });\n  }; // Convenience version of a common use case of `map`: fetching a property.\n\n\n  _.pluck = function (obj, key) {\n    return _.map(obj, function (value) {\n      return value[key];\n    });\n  }; // Return the maximum element or (element-based computation).\n\n\n  _.max = function (obj, iterator, context) {\n    if (!iterator && _.isArray(obj)) return Math.max.apply(Math, obj);\n    var result = {\n      computed: -Infinity\n    };\n    each(obj, function (value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed >= result.computed && (result = {\n        value: value,\n        computed: computed\n      });\n    });\n    return result.value;\n  }; // Return the minimum element (or element-based computation).\n\n\n  _.min = function (obj, iterator, context) {\n    if (!iterator && _.isArray(obj)) return Math.min.apply(Math, obj);\n    var result = {\n      computed: Infinity\n    };\n    each(obj, function (value, index, list) {\n      var computed = iterator ? iterator.call(context, value, index, list) : value;\n      computed < result.computed && (result = {\n        value: value,\n        computed: computed\n      });\n    });\n    return result.value;\n  }; // Sort the object's values by a criterion produced by an iterator.\n\n\n  _.sortBy = function (obj, iterator, context) {\n    return _.pluck(_.map(obj, function (value, index, list) {\n      return {\n        value: value,\n        criteria: iterator.call(context, value, index, list)\n      };\n    }).sort(function (left, right) {\n      var a = left.criteria,\n          b = right.criteria;\n      return a < b ? -1 : a > b ? 1 : 0;\n    }), 'value');\n  }; // Use a comparator function to figure out at what index an object should\n  // be inserted so as to maintain order. Uses binary search.\n\n\n  _.sortedIndex = function (array, obj, iterator) {\n    iterator || (iterator = _.identity);\n    var low = 0,\n        high = array.length;\n\n    while (low < high) {\n      var mid = low + high >> 1;\n      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;\n    }\n\n    return low;\n  }; // Safely convert anything iterable into a real, live array.\n\n\n  _.toArray = function (iterable) {\n    if (!iterable) return [];\n    if (iterable.toArray) return iterable.toArray();\n    if (_.isArray(iterable)) return iterable;\n    if (_.isArguments(iterable)) return slice.call(iterable);\n    return _.values(iterable);\n  }; // Return the number of elements in an object.\n\n\n  _.size = function (obj) {\n    return _.toArray(obj).length;\n  }; // Array Functions\n  // ---------------\n  // Get the first element of an array. Passing **n** will return the first N\n  // values in the array. Aliased as `head`. The **guard** check allows it to work\n  // with `_.map`.\n\n\n  _.first = _.head = function (array, n, guard) {\n    return n != null && !guard ? slice.call(array, 0, n) : array[0];\n  }; // Returns everything but the first entry of the array. Aliased as `tail`.\n  // Especially useful on the arguments object. Passing an **index** will return\n  // the rest of the values in the array from that index onward. The **guard**\n  // check allows it to work with `_.map`.\n\n\n  _.rest = _.tail = function (array, index, guard) {\n    return slice.call(array, index == null || guard ? 1 : index);\n  }; // Get the last element of an array.\n\n\n  _.last = function (array) {\n    return array[array.length - 1];\n  }; // Trim out all falsy values from an array.\n\n\n  _.compact = function (array) {\n    return _.filter(array, function (value) {\n      return !!value;\n    });\n  }; // Return a completely flattened version of an array.\n\n\n  _.flatten = function (array) {\n    return _.reduce(array, function (memo, value) {\n      if (_.isArray(value)) return memo.concat(_.flatten(value));\n      memo[memo.length] = value;\n      return memo;\n    }, []);\n  }; // Return a version of the array that does not contain the specified value(s).\n\n\n  _.without = function (array) {\n    var values = slice.call(arguments, 1);\n    return _.filter(array, function (value) {\n      return !_.include(values, value);\n    });\n  }; // Produce a duplicate-free version of the array. If the array has already\n  // been sorted, you have the option of using a faster algorithm.\n  // Aliased as `unique`.\n\n\n  _.uniq = _.unique = function (array, isSorted) {\n    return _.reduce(array, function (memo, el, i) {\n      if (0 == i || (isSorted === true ? _.last(memo) != el : !_.include(memo, el))) memo[memo.length] = el;\n      return memo;\n    }, []);\n  }; // Produce an array that contains every item shared between all the\n  // passed-in arrays.\n\n\n  _.intersect = function (array) {\n    var rest = slice.call(arguments, 1);\n    return _.filter(_.uniq(array), function (item) {\n      return _.every(rest, function (other) {\n        return _.indexOf(other, item) >= 0;\n      });\n    });\n  }; // Zip together multiple lists into a single array -- elements that share\n  // an index go together.\n\n\n  _.zip = function () {\n    var args = slice.call(arguments);\n\n    var length = _.max(_.pluck(args, 'length'));\n\n    var results = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      results[i] = _.pluck(args, \"\" + i);\n    }\n\n    return results;\n  }; // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),\n  // we need this function. Return the position of the first occurrence of an\n  // item in an array, or -1 if the item is not included in the array.\n  // Delegates to **ECMAScript 5**'s native `indexOf` if available.\n  // If the array is large and already in sort order, pass `true`\n  // for **isSorted** to use binary search.\n\n\n  _.indexOf = function (array, item, isSorted) {\n    if (array == null) return -1;\n    var i, l;\n\n    if (isSorted) {\n      i = _.sortedIndex(array, item);\n      return array[i] === item ? i : -1;\n    }\n\n    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);\n\n    for (i = 0, l = array.length; i < l; i++) {\n      if (array[i] === item) return i;\n    }\n\n    return -1;\n  }; // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.\n\n\n  _.lastIndexOf = function (array, item) {\n    if (array == null) return -1;\n    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);\n    var i = array.length;\n\n    while (i--) {\n      if (array[i] === item) return i;\n    }\n\n    return -1;\n  }; // Generate an integer Array containing an arithmetic progression. A port of\n  // the native Python `range()` function. See\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\n\n\n  _.range = function (start, stop, step) {\n    if (arguments.length <= 1) {\n      stop = start || 0;\n      start = 0;\n    }\n\n    step = arguments[2] || 1;\n    var len = Math.max(Math.ceil((stop - start) / step), 0);\n    var idx = 0;\n    var range = new Array(len);\n\n    while (idx < len) {\n      range[idx++] = start;\n      start += step;\n    }\n\n    return range;\n  }; // Function (ahem) Functions\n  // ------------------\n  // Create a function bound to a given object (assigning `this`, and arguments,\n  // optionally). Binding with arguments is also known as `curry`.\n  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.\n  // We check for `func.bind` first, to fail fast when `func` is undefined.\n\n\n  _.bind = function (func, obj) {\n    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));\n    var args = slice.call(arguments, 2);\n    return function () {\n      return func.apply(obj, args.concat(slice.call(arguments)));\n    };\n  }; // Bind all of an object's methods to that object. Useful for ensuring that\n  // all callbacks defined on an object belong to it.\n\n\n  _.bindAll = function (obj) {\n    var funcs = slice.call(arguments, 1);\n    if (funcs.length == 0) funcs = _.functions(obj);\n    each(funcs, function (f) {\n      obj[f] = _.bind(obj[f], obj);\n    });\n    return obj;\n  }; // Memoize an expensive function by storing its results.\n\n\n  _.memoize = function (func, hasher) {\n    var memo = {};\n    hasher || (hasher = _.identity);\n    return function () {\n      var key = hasher.apply(this, arguments);\n      return hasOwnProperty.call(memo, key) ? memo[key] : memo[key] = func.apply(this, arguments);\n    };\n  }; // Delays a function for the given number of milliseconds, and then calls\n  // it with the arguments supplied.\n\n\n  _.delay = function (func, wait) {\n    var args = slice.call(arguments, 2);\n    return setTimeout(function () {\n      return func.apply(func, args);\n    }, wait);\n  }; // Defers a function, scheduling it to run after the current call stack has\n  // cleared.\n\n\n  _.defer = function (func) {\n    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));\n  }; // Internal function used to implement `_.throttle` and `_.debounce`.\n\n\n  var limit = function limit(func, wait, debounce) {\n    var timeout;\n    return function () {\n      var context = this,\n          args = arguments;\n\n      var throttler = function throttler() {\n        timeout = null;\n        func.apply(context, args);\n      };\n\n      if (debounce) clearTimeout(timeout);\n      if (debounce || !timeout) timeout = setTimeout(throttler, wait);\n    };\n  }; // Returns a function, that, when invoked, will only be triggered at most once\n  // during a given window of time.\n\n\n  _.throttle = function (func, wait) {\n    return limit(func, wait, false);\n  }; // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // N milliseconds.\n\n\n  _.debounce = function (func, wait) {\n    return limit(func, wait, true);\n  }; // Returns a function that will be executed at most one time, no matter how\n  // often you call it. Useful for lazy initialization.\n\n\n  _.once = function (func) {\n    var ran = false,\n        memo;\n    return function () {\n      if (ran) return memo;\n      ran = true;\n      return memo = func.apply(this, arguments);\n    };\n  }; // Returns the first function passed as an argument to the second,\n  // allowing you to adjust arguments, run code before and after, and\n  // conditionally execute the original function.\n\n\n  _.wrap = function (func, wrapper) {\n    return function () {\n      var args = [func].concat(slice.call(arguments));\n      return wrapper.apply(this, args);\n    };\n  }; // Returns a function that is the composition of a list of functions, each\n  // consuming the return value of the function that follows.\n\n\n  _.compose = function () {\n    var funcs = slice.call(arguments);\n    return function () {\n      var args = slice.call(arguments);\n\n      for (var i = funcs.length - 1; i >= 0; i--) {\n        args = [funcs[i].apply(this, args)];\n      }\n\n      return args[0];\n    };\n  }; // Returns a function that will only be executed after being called N times.\n\n\n  _.after = function (times, func) {\n    return function () {\n      if (--times < 1) {\n        return func.apply(this, arguments);\n      }\n    };\n  }; // Object Functions\n  // ----------------\n  // Retrieve the names of an object's properties.\n  // Delegates to **ECMAScript 5**'s native `Object.keys`\n\n\n  _.keys = nativeKeys || function (obj) {\n    if (obj !== Object(obj)) throw new TypeError('Invalid object');\n    var keys = [];\n\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) keys[keys.length] = key;\n    }\n\n    return keys;\n  }; // Retrieve the values of an object's properties.\n\n\n  _.values = function (obj) {\n    return _.map(obj, _.identity);\n  }; // Return a sorted list of the function names available on the object.\n  // Aliased as `methods`\n\n\n  _.functions = _.methods = function (obj) {\n    return _.filter(_.keys(obj), function (key) {\n      return _.isFunction(obj[key]);\n    }).sort();\n  }; // Extend a given object with all the properties in passed-in object(s).\n\n\n  _.extend = function (obj) {\n    each(slice.call(arguments, 1), function (source) {\n      for (var prop in source) {\n        if (source[prop] !== void 0) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  }; // Fill in a given object with default properties.\n\n\n  _.defaults = function (obj) {\n    each(slice.call(arguments, 1), function (source) {\n      for (var prop in source) {\n        if (obj[prop] == null) obj[prop] = source[prop];\n      }\n    });\n    return obj;\n  }; // Create a (shallow-cloned) duplicate of an object.\n\n\n  _.clone = function (obj) {\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\n  }; // Invokes interceptor with the obj, and then returns obj.\n  // The primary purpose of this method is to \"tap into\" a method chain, in\n  // order to perform operations on intermediate results within the chain.\n\n\n  _.tap = function (obj, interceptor) {\n    interceptor(obj);\n    return obj;\n  }; // Perform a deep comparison to check if two objects are equal.\n\n\n  _.isEqual = function (a, b) {\n    // Check object identity.\n    if (a === b) return true; // Different types?\n\n    var atype = typeof a,\n        btype = typeof b;\n    if (atype != btype) return false; // Basic equality test (watch out for coercions).\n\n    if (a == b) return true; // One is falsy and the other truthy.\n\n    if (!a && b || a && !b) return false; // Unwrap any wrapped objects.\n\n    if (a._chain) a = a._wrapped;\n    if (b._chain) b = b._wrapped; // One of them implements an isEqual()?\n\n    if (a.isEqual) return a.isEqual(b); // Check dates' integer values.\n\n    if (_.isDate(a) && _.isDate(b)) return a.getTime() === b.getTime(); // Both are NaN?\n\n    if (_.isNaN(a) && _.isNaN(b)) return false; // Compare regular expressions.\n\n    if (_.isRegExp(a) && _.isRegExp(b)) return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline; // If a is not an object by this point, we can't handle it.\n\n    if (atype !== 'object') return false; // Check for different array lengths before comparing contents.\n\n    if (a.length && a.length !== b.length) return false; // Nothing else worked, deep compare the contents.\n\n    var aKeys = _.keys(a),\n        bKeys = _.keys(b); // Different object sizes?\n\n\n    if (aKeys.length != bKeys.length) return false; // Recursive comparison of contents.\n\n    for (var key in a) {\n      if (!(key in b) || !_.isEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  }; // Is a given array or object empty?\n\n\n  _.isEmpty = function (obj) {\n    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;\n\n    for (var key in obj) {\n      if (hasOwnProperty.call(obj, key)) return false;\n    }\n\n    return true;\n  }; // Is a given value a DOM element?\n\n\n  _.isElement = function (obj) {\n    return !!(obj && obj.nodeType == 1);\n  }; // Is a given value an array?\n  // Delegates to ECMA5's native Array.isArray\n\n\n  _.isArray = nativeIsArray || function (obj) {\n    return toString.call(obj) === '[object Array]';\n  }; // Is a given variable an arguments object?\n\n\n  _.isArguments = function (obj) {\n    return !!(obj && hasOwnProperty.call(obj, 'callee'));\n  }; // Is a given value a function?\n\n\n  _.isFunction = function (obj) {\n    return !!(obj && obj.constructor && obj.call && obj.apply);\n  }; // Is a given value a string?\n\n\n  _.isString = function (obj) {\n    return !!(obj === '' || obj && obj.charCodeAt && obj.substr);\n  }; // Is a given value a number?\n\n\n  _.isNumber = function (obj) {\n    return !!(obj === 0 || obj && obj.toExponential && obj.toFixed);\n  }; // Is the given value `NaN`? `NaN` happens to be the only value in JavaScript\n  // that does not equal itself.\n\n\n  _.isNaN = function (obj) {\n    return obj !== obj;\n  }; // Is a given value a boolean?\n\n\n  _.isBoolean = function (obj) {\n    return obj === true || obj === false;\n  }; // Is a given value a date?\n\n\n  _.isDate = function (obj) {\n    return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);\n  }; // Is the given value a regular expression?\n\n\n  _.isRegExp = function (obj) {\n    return !!(obj && obj.test && obj.exec && (obj.ignoreCase || obj.ignoreCase === false));\n  }; // Is a given value equal to null?\n\n\n  _.isNull = function (obj) {\n    return obj === null;\n  }; // Is a given variable undefined?\n\n\n  _.isUndefined = function (obj) {\n    return obj === void 0;\n  }; // Utility Functions\n  // -----------------\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\n  // previous owner. Returns a reference to the Underscore object.\n\n\n  _.noConflict = function () {\n    root._ = previousUnderscore;\n    return this;\n  }; // Keep the identity function around for default iterators.\n\n\n  _.identity = function (value) {\n    return value;\n  }; // Run a function **n** times.\n\n\n  _.times = function (n, iterator, context) {\n    for (var i = 0; i < n; i++) {\n      iterator.call(context, i);\n    }\n  }; // Add your own custom functions to the Underscore object, ensuring that\n  // they're correctly added to the OOP wrapper as well.\n\n\n  _.mixin = function (obj) {\n    each(_.functions(obj), function (name) {\n      addToWrapper(name, _[name] = obj[name]);\n    });\n  }; // Generate a unique integer id (unique within the entire client session).\n  // Useful for temporary DOM ids.\n\n\n  var idCounter = 0;\n\n  _.uniqueId = function (prefix) {\n    var id = idCounter++;\n    return prefix ? prefix + id : id;\n  }; // By default, Underscore uses ERB-style template delimiters, change the\n  // following template settings to use alternative delimiters.\n\n\n  _.templateSettings = {\n    evaluate: /<%([\\s\\S]+?)%>/g,\n    interpolate: /<%=([\\s\\S]+?)%>/g\n  }; // JavaScript micro-templating, similar to John Resig's implementation.\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\n  // and correctly escapes quotes within interpolated code.\n\n  _.template = function (str, data) {\n    var c = _.templateSettings;\n    var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' + 'with(obj||{}){__p.push(\\'' + str.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\'\").replace(c.interpolate, function (match, code) {\n      return \"',\" + code.replace(/\\\\'/g, \"'\") + \",'\";\n    }).replace(c.evaluate || null, function (match, code) {\n      return \"');\" + code.replace(/\\\\'/g, \"'\").replace(/[\\r\\n\\t]/g, ' ') + \"__p.push('\";\n    }).replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t') + \"');}return __p.join('');\";\n    var func = new Function('obj', tmpl);\n    return data ? func(data) : func;\n  }; // The OOP Wrapper\n  // ---------------\n  // If Underscore is called as a function, it returns a wrapped object that\n  // can be used OO-style. This wrapper holds altered versions of all the\n  // underscore functions. Wrapped objects may be chained.\n\n\n  var wrapper = function wrapper(obj) {\n    this._wrapped = obj;\n  }; // Expose `wrapper.prototype` as `_.prototype`\n\n\n  _.prototype = wrapper.prototype; // Helper function to continue chaining intermediate results.\n\n  var result = function result(obj, chain) {\n    return chain ? _(obj).chain() : obj;\n  }; // A method to easily add functions to the OOP wrapper.\n\n\n  var addToWrapper = function addToWrapper(name, func) {\n    wrapper.prototype[name] = function () {\n      var args = slice.call(arguments);\n      unshift.call(args, this._wrapped);\n      return result(func.apply(_, args), this._chain);\n    };\n  }; // Add all of the Underscore functions to the wrapper object.\n\n\n  _.mixin(_); // Add all mutator Array functions to the wrapper.\n\n\n  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function (name) {\n    var method = ArrayProto[name];\n\n    wrapper.prototype[name] = function () {\n      method.apply(this._wrapped, arguments);\n      return result(this._wrapped, this._chain);\n    };\n  }); // Add all accessor Array functions to the wrapper.\n\n  each(['concat', 'join', 'slice'], function (name) {\n    var method = ArrayProto[name];\n\n    wrapper.prototype[name] = function () {\n      return result(method.apply(this._wrapped, arguments), this._chain);\n    };\n  }); // Start chaining a wrapped Underscore object.\n\n  wrapper.prototype.chain = function () {\n    this._chain = true;\n    return this;\n  }; // Extracts the result from a wrapped and chained object.\n\n\n  wrapper.prototype.value = function () {\n    return this._wrapped;\n  };\n})();","map":null,"metadata":{},"sourceType":"script"}